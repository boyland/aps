with "simple";
-- Simple example of SNC
module SIMPLE_SNC[T :: var SIMPLE[]] extends T begin
  attribute Expr.i1 : Integer;
  attribute Expr.i2 : Integer;
  attribute Expr.s1 : Integer;
  attribute Expr.s2 : Integer;

  pragma inherited(i1,i2);
  pragma synthesized(s1,s2);

  attribute Stmt.stmt_total : Integer;
  attribute Stmts.stmts_total : Integer;
  attribute Block.block_total : Integer;
  attribute Program.program_total : Integer;

  pragma synthesized(stmt_total, stmts_total, block_total, program_total);

  match ?self:Stmt=assign_stmt(?e1:Expr,?e2:Expr) begin
    e1.i1 := 0;
    e1.i2 := e1.s1;
    e2.i2 := 0;
    e2.i1 := e2.s2;

    if e1.s2 < e2.s1 then
      if e2.s1 > 700 then
        self.stmt_total := e1.s2 + e2.s1 + 100;
      else
        self.stmt_total := e1.s2 - e2.s1 + 200;
      endif;
    else
      if e2.s1 < 800 then
        self.stmt_total := e1.s2 + e2.s1 - 300;
      else
        self.stmt_total := e1.s2 - e2.s1 - 400;
      endif;
    endif;
  end;

  match ?e:Expr=intconstant(?i:Integer) begin
    e.s1 := e.i1;
    e.s2 := e.i2;
  end;

  match ?b:Block=block(?ds:Decls,?ss:Stmts) begin
    b.block_total := ss.stmts_total;
  end;

  match ?ds:Decls=no_decls() begin
  end;
  
  match ?ds0:Decls=xcons_decls(?ds1:Decls,?d:Decl) begin
  end;

  match ?d:Decl=decl(?id:String,?ty:Type) begin
  end;

  match ?p:Program=program(?b:Block) begin
    p.program_total := b.block_total;
  end;

  match ?t:Type=integer_type() begin
  end;
  
  match ?t:Type=string_type() begin
  end;

  match ?ss:Stmts=no_stmts() begin
    ss.stmts_total := 0;
  end;
  
  match ?ss0:Stmts=xcons_stmts(?ss1:Stmts,?s:Stmt) begin
    ss0.stmts_total := ss1.stmts_total + s.stmt_total;
  end;

  match ?s:Stmt=block_stmt(?b:Block) begin
    s.stmt_total := b.block_total;
  end;
  
  match ?e:Expr=strconstant(?:String) begin
    e.s1 := 0;
    e.s2 := 0;
  end;

  match ?e:Expr=variable(?id:String) begin
    e.s1 := 0;
    e.s2 := 0;
  end;
end;
